--- class.go.orig	2013-07-07 16:41:23.295615219 +0100
+++ class.go	2013-07-07 16:41:23.295615219 +0100
@@ -273,7 +273,7 @@
 }
 
 //export GoClassTraverse
-func GoClassTraverse(obj, visit, arg unsafe.Pointer) int {
+func GoClassTraverse(obj *_PyObject, visit, arg *byte) int {
 	// Get the Python type object
 	pyType := (*_PyTypeObject)((*_PyObject)(obj).ob_type)
 
@@ -291,7 +291,7 @@
 		if !field.Type.AssignableTo(otyp) {
 			continue
 		}
-		v := unsafe.Pointer(uintptr(obj) + field.Offset)
+		v := unsafe.Pointer(uintptr(unsafe.Pointer(obj)) + field.Offset)
 		var o Object
 		if field.Type == otyp {
 			o = *(*Object)(v)
@@ -721,7 +721,7 @@
 			_free(unsafe.Pointer(pyType))
 			return nil, fmt.Errorf("%s embeds %s as first member, which is not a supported \"base class\"", btyp.Name(), firstName)
 		}
-		pyType.tp_base = (*_struct__typeobject)(unsafe.Pointer(baseType))
+		pyType.tp_base = (*__typeobject)(unsafe.Pointer(baseType))
 	}
 
 	// Get a new context structure
@@ -799,12 +799,12 @@
 
 	for name, method := range methods {
 		s := _CString(name)
-		_setTypeAttr(pyType, s, _newMethod(s, method.f, int32(method.flags)))
+		_setTypeAttr(pyType, s, _newMethod(s, (*byte)(method.f), int32(method.flags)))
 	}
 
 	for name, prop := range props {
 		s := _CString(name)
-		_setTypeAttr(pyType, s, _newProperty(pyType, s, prop.get, prop.set))
+		_setTypeAttr(pyType, s, _newProperty(pyType, s, (*byte)(prop.get), (*byte)(prop.set)))
 	}
 
 	for i := 0; i < btyp.NumField(); i++ {

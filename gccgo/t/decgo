#!/usr/bin/env python

import os
import re
import subprocess
import sys

c = re.compile(r'(^|\W)C\.(\w+)')

def load_map():
    l = {}
    if os.path.exists('typedefs.map'):
        execfile('typedefs.map', {}, l)
    m = l.get('map', {})
    m['float'] = 'float32'
    m['double'] = 'float64'
    m['int'] = 'int32'
    m['char'] = 'int8'
    m['long'] = 'int64'
    m['longlong'] = 'int64'
    return m

def load_aliases():
    a = {}
    f = open('gen-py.go')
    for line in f:
        if not line.startswith('// unknowndefine '):
            continue
        name, alias = line[17:].strip().split(' ', 1)
        a[name] = alias
    f.close()
    return a

def load_vars():
    v = []
    f = open('gen-py.go')
    for line in f:
        if not line.startswith('var '):
            continue
        name, _ = line[4:].split(' ', 1)
        v.append(name[1:])
    f.close()
    return v

def resolve_alias(n):
    while n in aliases:
        n = aliases[n]
    return n

def replace(m):
    a = m.group(1)
    b = m.group(2)
    ab = resolve_alias(b)
    if ab in typedefs:
        return '%s%s' % (a, typedefs[b])
    elif ab in vars:
        return '%s*_%s' % (a, b)
    return '%s_%s' % (a, b)

def main():
    global typedefs, vars, fixup, aliases
    if len(sys.argv) < 3:
        print >> sys.stderr, "usage: %s <input> <output>" % sys.argv[0]
        sys.exit(1)
    typedefs = load_map()
    aliases = load_aliases()
    vars = load_vars()
    filename = sys.argv[1]
    outname = sys.argv[2]
    fixup = outname.replace('.go', '.fixup')
    ex = []
    f = open(filename)
    o = open(outname, "w")
    for line in f:
        if line.strip() == 'import "C"':
            o.write('//')
        elif line.startswith('//export'):
            ex.append(line[8:].strip())
        for e in ex:
            e2 = e[0].upper() + e[1:]
            line = line.replace(e, e2)
        o.write(c.sub(replace, line))
    o.close()
    if os.path.exists(fixup):
        if subprocess.call(['patch', '-F0', '-s', '-i', fixup]) != 0:
            print >> sys.stderr, "Failed to apply fixup for %s" % outname
            sys.exit(1)

if __name__ == "__main__":
    main()
